// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Cli$ReasonRancherCli = require("./Cli.bs.js");
var Env$ReasonRancherCli = require("./Env.bs.js");
var Util$ReasonRancherCli = require("./Util.bs.js");
var Rancher$ReasonRancherCli = require("./Rancher.bs.js");
var Preferences$ReasonRancherCli = require("./Preferences.bs.js");

var help = "\n rancher-cli\n\n Options can be read from a stored configuration or provided through environment variables.\n If they exist, enviroment variables have preference over stored configurations.\n Accepted env variables are RANCHER_URL, RANCHER_SECRET_KEY, RANCHER_ACCESS_KEY\n\n Usage:\n    rancher-cli upgrade <stackName> <imageName> [-e  <NAME=value>...] [--rancher-env=<name>]\n    rancher-cli upgrade-finish <stackName> (<imageName>|-n <serviceName>)\n    rancher-cli get (dockerCompose|rancherCompose) <stackName> [-o <fileName>] [--rancher-env=<name>]\n    rancher-cli config saveEnv\n    rancher-cli config print\n    rancher-cli -v\n\n\n Options:\n    --rancher-env=<name>            Rancher environment name (stg or int) [default: int]\n    -e --environment <NAME=value>   Adds a new environment variable to the list of already existing environment variables\n    -o --output      <fileName>     Write the result of the command to a file instead of stdout\n    -v --version                    Show the version of the tool\n    -n --name        <serviceName>  Selects a service by name. Can contain asterisk (*) wildcards (ej: 'api-*' )\n";

var Pref = Preferences$ReasonRancherCli.Make(/* module */[]);

var defaults = {
  user: "",
  pass: "",
  env: "int"
};

var prefs = Curry._6(Pref[/* read */0], undefined, Js_primitive.some(defaults), undefined, undefined, undefined, "com.rancher.cli");

function saveEnv(prefs) {
  Util$ReasonRancherCli.withOption((function (param) {
          prefs.user = param;
          return /* () */0;
        }), Env$ReasonRancherCli.get("RANCHER_USER"));
  return Util$ReasonRancherCli.withOption((function (param) {
                prefs.pass = param;
                return /* () */0;
              }), Env$ReasonRancherCli.get("RANCHER_PASS"));
}

var match = Cli$ReasonRancherCli.parse(help);

if (typeof match === "number") {
  if (match === 0) {
    console.log("This is the current version  ...");
  } else {
    console.log("Fuck you");
  }
} else {
  switch (match.tag | 0) {
    case 0 : 
        Rancher$ReasonRancherCli.upgrade(match[0], match[1]);
        break;
    case 1 : 
        Rancher$ReasonRancherCli.upgradeFinish(match[0], match[1]);
        break;
    case 2 : 
        var outputFile = match[2];
        Rancher$ReasonRancherCli.get(match[0], match[1]);
        console.log(outputFile ? " Output to " + outputFile[0] : " Output to stdout");
        break;
    case 3 : 
        if (match[0]) {
          console.log(prefs);
        } else {
          saveEnv(prefs);
        }
        break;
    
  }
}

exports.help = help;
exports.Pref = Pref;
exports.defaults = defaults;
exports.prefs = prefs;
exports.saveEnv = saveEnv;
/* Pref Not a pure module */
