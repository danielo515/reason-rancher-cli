// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Axios = require("axios");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function client(user, pass, url, env) {
  return /* record */[
          /* axios */Axios.create({
                baseURL: url,
                withCredentials: true,
                auth: {
                  username: user,
                  password: pass
                }
              }),
          /* env */env
        ];
}

function findStack(name) {
  return (function (param) {
      return Js_primitive.undefined_to_opt(param.find((function (s) {
                        return s.name.toLowerCase() === name.toLowerCase();
                      })));
    });
}

function getStacks(client) {
  return client[/* axios */0].get("v2-beta/projects?name=" + client[/* env */1]).then((function (x) {
                  return client[/* axios */0].get(Caml_array.caml_array_get(x.data.data, 0).links.stacks);
                })).then((function (x) {
                return x.data;
              }));
}

function upgrade(stack, image, client) {
  console.log("Upgrading " + (stack + (" using " + (image + " image"))));
  return getStacks(client).then((function (x) {
                    var st = Belt_Option.getExn(findStack(stack)(x.data));
                    return client[/* axios */0].get(st.links.services);
                  })).then((function (x) {
                  var x$1 = Belt_Option.getExn(findStack(image)(x.data.data));
                  return Promise.resolve(/* Ok */Block.__(0, [x$1]));
                })).catch((function () {
                return Promise.resolve(/* Error */Block.__(1, ["Can not find stack " + (stack + (" containing service" + image))]));
              }));
}

function upgradeFinish(client, stack, _) {
  console.log("Finishing upgrade of " + stack);
  return getStacks(client).then((function (x) {
                return Promise.resolve((console.log("Stacks", x), /* () */0));
              }));
}

function compose(_, stack) {
  console.log("Getting compose file of " + stack);
  return /* () */0;
}

exports.client = client;
exports.findStack = findStack;
exports.getStacks = getStacks;
exports.upgrade = upgrade;
exports.upgradeFinish = upgradeFinish;
exports.compose = compose;
/* axios Not a pure module */
